<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on  </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://bcarrell.me/posts/index.xml</link>
    
    
    
    <updated>Tue, 24 Jun 2014 00:00:00 UTC</updated>
    
    <item>
      <title>vim-fireplace &#43; reloaded</title>
      <link>http://bcarrell.me/posts/fireplace</link>
      <pubDate>Tue, 24 Jun 2014 00:00:00 UTC</pubDate>
      
      <guid>http://bcarrell.me/posts/fireplace</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s no secret that most Clojure developers use Emacs.  It&amp;rsquo;s a Lisp machine;
no one can argue that.  I&amp;rsquo;ve been tempted by the much-lauded Emacs+Evil combination.
But I&amp;rsquo;m on team vim, and programming Clojure in 2014 with vim-fireplace is awesome.&lt;/p&gt;

&lt;p&gt;Just as awesome is Stuart Sierra&amp;rsquo;s &lt;a href=&#34;http://www.google.com&#34;&gt;Reloaded&lt;/a&gt; workflow and
its smarter &lt;code&gt;require&lt;/code&gt; logic.  The workflow also integrates perfectly with his
&lt;a href=&#34;https://github.com/stuartsierra/component&#34;&gt;Component&lt;/a&gt; library.  It turns into
a pretty seamless experience where you can reload code freely without incurring
the startup penalty of the JVM.&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;A Crash Course on Reloaded/Component&lt;/h3&gt;

&lt;p&gt;Start with your &lt;code&gt;project.clj&lt;/code&gt;, like so:&lt;/p&gt;

&lt;figure&gt;
&lt;figcaption&gt;project.clj&lt;/figcaption&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:profiles&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:dev&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:dependencies&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[[org.clojure/tools.namespace&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;0.2.4&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]]&lt;/span&gt;
                  &lt;span style=&#34;color: #e6db74&#34;&gt;:source-paths&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/figure&gt;

&lt;p&gt;Since you added a &lt;code&gt;dev&lt;/code&gt; source-path in that configuration, include a &lt;code&gt;user.clj&lt;/code&gt;
file within.  This file will support your fancy new Reloaded/Component workflow
by including a bunch of functions automatically at REPL startup.&lt;/p&gt;

&lt;figure&gt;
&lt;figcaption&gt;dev/user.clj&lt;/figcaption&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;ns &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:require&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[com.stuartsierra.component&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;component]&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;[clojure.tools.namespace.repl&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:refer&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[refresh&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;refresh-all]]&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;[yourproject.system&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:refer&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[dev-system]]))&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;system&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nil)&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;init&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Constructs the current development system.&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;alter-var-root&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;system&lt;/span&gt;
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(constantly (&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;dev-system&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:port&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;8080&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}))))&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Starts the current development system.&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;alter-var-root&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;system&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;component/start))&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stop&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Shuts down and destroys the current development system.&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;alter-var-root&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;system&lt;/span&gt;
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;fn &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[s]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(when s&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;component/stop&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s)))))&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;go&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Initializes the current development system and starts it running.&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;reset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;stop&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;refresh&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:after&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;user/go&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/figure&gt;

&lt;p&gt;This is pretty vanilla stuff, leveraging Component and Reloaded.  The important
part is that we &lt;code&gt;require&lt;/code&gt; a system from our project.  For simplicity, let&amp;rsquo;s
assume the system is a single webserver component, but in normal cases you&amp;rsquo;d want to
weave together various components (database, cache, etc.).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s our system:&lt;/p&gt;

&lt;figure&gt;
&lt;figcaption&gt;system.clj&lt;/figcaption&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;dev-system&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:keys&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[port]}]&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;component/system-map&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;:webserver&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;server/new-webserver&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;port)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/figure&gt;

&lt;p&gt;And here&amp;rsquo;s our webserver component, using &lt;code&gt;http-kit&lt;/code&gt;:&lt;/p&gt;

&lt;figure&gt;
&lt;figcaption&gt;webserver.clj&lt;/figcaption&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;defrecord &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Webserver&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[port&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;handler]&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;component/Lifecycle&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[component]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;(println &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;;; Starting http-kit webserver...&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;(assoc component&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:server&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;http/run-server&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:port&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;port})))&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;stop&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[component]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;(when-let [server&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:server&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;component)]&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;(println &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;;; Stopping server in 100ms...&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:timeout&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))))&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new-webserver&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;([port]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;new-webserver&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;app&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;([port&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;handler]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Webserver.&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;handler)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/figure&gt;

&lt;p&gt;Now that we have everything tied together, we can simply do &lt;code&gt;(go)&lt;/code&gt; at our REPL
to kick the whole thing off.  When we want to safely reload our code, we can
do &lt;code&gt;(reset)&lt;/code&gt;, which is essentially a supreme version of &lt;code&gt;(require ... :reload)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;What about vim?&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;vim-fireplace&lt;/code&gt; comes with support for the traditional code reload method by using the motion &lt;code&gt;cpr&lt;/code&gt;, but
&lt;a href=&#34;https://github.com/clojure/tools.namespace#reloading-code-motivation&#34;&gt;this is very brittle&lt;/a&gt;, and now
we have all of this awesome Reloaded/Component stuff set up, so let&amp;rsquo;s tie it together with some secret sauce.&lt;/p&gt;

&lt;p&gt;First, a helper function, because you&amp;rsquo;ll probably need this a lot:&lt;/p&gt;

&lt;figure&gt;
&lt;figcaption&gt;.vimrc&lt;/figcaption&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SendToREPL(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sexp&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fireplace#session_eval(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:sexp&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/figure&gt;

&lt;p&gt;If your vim session is connected to your nrepl session, you can provide &lt;code&gt;SendToREPL()&lt;/code&gt;
with any Clojure forms to evaluate them.  If you&amp;rsquo;re not connected, you&amp;rsquo;ll see
a message like &lt;code&gt;No live REPL connection&lt;/code&gt;, in which case you can just &lt;code&gt;:Connect&lt;/code&gt;
to it.&lt;/p&gt;

&lt;p&gt;Now you can start binding forms to various keybinds of your choosing:&lt;/p&gt;

&lt;figure&gt;
&lt;figcaption&gt;.vimrc&lt;/figcaption&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;nnoremap&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;Leader&amp;gt;fr&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:call&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SendToREPL(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;user/reset&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;nnoremap&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;Leader&amp;gt;fg&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:call&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SendToREPL(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;user/go&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;nnoremap&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;Leader&amp;gt;fs&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:call&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SendToREPL(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;user/stop&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/figure&gt;

&lt;p&gt;Those are the immediate ones I find useful in this situation, but you may think of others.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reasons Why a Functional Programmer Might Embrace Go</title>
      <link>http://bcarrell.me/posts/why_go</link>
      <pubDate>Wed, 21 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://bcarrell.me/posts/why_go</guid>
      <description>

&lt;p&gt;I believe that functional programming as a paradigm brings a lot of really,
really important ideas to the table, but if I had to summarize the most
important reason to adopt a functional programming style it would be:
functional programming techniques encourage simplicity and an easier way to reason
about, develop, test, and maintain software.  Predicting the behavior of programs
is, I would argue, much easier when the program is designed in a functional way.&lt;/p&gt;

&lt;p&gt;Go is an imperative, strongly-typed language.  It doesn&amp;rsquo;t have any applicative
functional builtins (that means no &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, or &lt;code&gt;filter&lt;/code&gt;).  Go programs
can be pretty verbose as a result.  It doesn&amp;rsquo;t have persistent or immutable
data structures (something that I find especially crucial today).  I won&amp;rsquo;t lie;
I feel a little handicapped in some situations.&lt;/p&gt;

&lt;p&gt;Why should a functional programmer consider using Go, after considering all of the
aforementioned downsides?&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;&lt;strong&gt;1. Standard tooling fosters simplicity&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Functional programs are easier to reason about, but the process of software
development doesn&amp;rsquo;t stop at the creation and composition of functions.  We need
to manage tooling, libraries, infrastructure, and deployments.  Go makes all of
those aspects of &lt;em&gt;delivering&lt;/em&gt; software easier.  Go has a rich, battle-tested
standard library.&lt;/p&gt;

&lt;p&gt;My third-party dependencies in my Go programs are close to zero, and this is
encouraged and decided &lt;em&gt;best practice&lt;/em&gt; within the community.  Less is more.&lt;/p&gt;

&lt;p&gt;When writing a Clojure program, and I want to make an http request, I need to
make a decision: do I reach for &lt;code&gt;clj-http&lt;/code&gt; or &lt;code&gt;http-kit&lt;/code&gt;?  After that, I add my
choice to my &lt;code&gt;project.clj&lt;/code&gt; and restart my REPL.  With Go, I &lt;code&gt;import net/http&lt;/code&gt;
and that&amp;rsquo;s it.  I don&amp;rsquo;t need to make a decision, and neither does your team.&lt;/p&gt;

&lt;p&gt;Deployments with Go are dead simple and speedy.  Compilation is lightning fast,
and my servers don&amp;rsquo;t need dependencies.  Really, all you need is to &lt;code&gt;scp&lt;/code&gt; your
binary.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;&lt;strong&gt;2. Channels can be transformative pipelines&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Instead of threading data through composed functions, you can thread data
through channels and pipe output into downstream channels.  This is essentially
the goal of functional composition: manipulate data through an &amp;lsquo;assembly line&amp;rsquo;
of functional transformations.  Instead, with Go, you can compose a
pipeline through a series of channels and transform your data.  It just requires
thinking about the situation a little differently.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;&lt;strong&gt;3. Functions are first-class&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Yes, functions are first-class.  Go supports higher-order functions, so, yes,
you can take functions as parameters and return functions.  You can even return
multiple functions.  It also supports function literals and closures.  You can
define your own function types.  There&amp;rsquo;s a lot to work with here.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;&lt;strong&gt;4. Interfaces are really great&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Go interfaces support data-oriented thought: this function takes a &lt;em&gt;thing&lt;/em&gt; (in
this case an interface) that can take and produce data of the expected types.
When you use interfaces, you mostly concern yourself with behavior.  Functional
programmers think in verbs, so interfaces can be an easy transition.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Go is not a functional language, nor does it support the common functional
applications.  However, the spirit of Go definitely nods in the direction of
the functional ideal:  simplicity and ease of reasoning.  Software development
doesn&amp;rsquo;t stop at &lt;code&gt;:wq&lt;/code&gt;, and I think you&amp;rsquo;ll find that Go&amp;rsquo;s idioms and standard
arsenal support the breadth of the development cycle.  Give it a try; I think
you&amp;rsquo;ll find that a lot of situations can be solved easily with Go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Brief Primer on Functional Thinking</title>
      <link>http://bcarrell.me/posts/functional_thinking</link>
      <pubDate>Sun, 12 Jan 2014 00:00:00 UTC</pubDate>
      
      <guid>http://bcarrell.me/posts/functional_thinking</guid>
      <description>&lt;p&gt;Learning functional programming can be a daunting task.  On your quest for
enlightenment, you&amp;rsquo;re likely to be bombarded with a slew of new, unfamiliar
terms like &lt;em&gt;currying&lt;/em&gt; and &lt;em&gt;higher-order functions&lt;/em&gt; and &lt;em&gt;partial application&lt;/em&gt;
and &lt;em&gt;referential transparency&lt;/em&gt;.  The first thing you should know about
functional programming is that it has a very simple, intuitive definition,
and that most of these new, scary words can be regarded as techniques to
achieve the goal of functional programming, but they do not define what
functional programming is.  The primary characteristic
of functional code is simply this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Functional code is code which does not modify or rely upon the surrounding
environment.  That is, &lt;strong&gt;purely functional code is code without side-effects&lt;/strong&gt;.
Functional thinking requires the programmer to regard side-effects as poison and take as
many steps as possible to minimize it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In practice, most codebases that regard themselves as functional contain
side-effecting functions.  Side effects are everywhere: database connections
or file reading and writing.  But functional code seeks to minimize that and
employs a lot of techniques you may have read about to achieve that: maps,
reductions, composability, referential transparency, and many more.&lt;/p&gt;

&lt;p&gt;Functional thinking prefers you to consider your data in an &lt;em&gt;elemental&lt;/em&gt; way.&lt;/p&gt;

&lt;p&gt;Instead of&amp;hellip;&lt;/p&gt;

&lt;figure&gt;
&lt;figcaption&gt;... mutating an Array&lt;/figcaption&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;myArray&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;learning&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;functional&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;myArray&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;myArray&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;myArray&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toUpperCase&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/figure&gt;

&lt;p&gt;Prefer this&amp;hellip;&lt;/p&gt;

&lt;figure&gt;
&lt;figcaption&gt;... mapping over an Array&lt;/figcaption&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;upcaseify&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;prototype&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toUpperCase&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;myArray&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;myArray&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;learning&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;functional&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;upcaseify&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/figure&gt;

&lt;p&gt;See the difference?&lt;/p&gt;

&lt;p&gt;In the first example, we&amp;rsquo;re muddying our thoughts of the problem.
We&amp;rsquo;re distracting our primitive monkey brains with secondary concepts like
managing indices or lengths of the array when really all we want to do is take
a &lt;em&gt;collection&lt;/em&gt; of things and do &lt;em&gt;something&lt;/em&gt; to each one.  As long as we can
perform an operation to one thing, we can perform that operation on many things
that fit the same criteria.  We don&amp;rsquo;t care about the size of the collection or
any other properties about it, because we framed our thought at the elemental
level.&lt;/p&gt;

&lt;p&gt;Of course, the example above yields a lot of other benefits that might not
immediately jump at you.  The map example demonstrates immutability.  The
looping construct modifies each element in the existing instance of the array.
The map function creates a new array and replaces the existing array with an
entirely new one.  This has a lot of very important benefits that you will
discover later.&lt;/p&gt;

&lt;p&gt;Gaining the benefits of functional programming doesn&amp;rsquo;t require you to &lt;code&gt;rm -rf&lt;/code&gt;
your entire codebase and start over.  Instead, start small.  Use &lt;code&gt;map&lt;/code&gt; instead
of looping constructs.  Write small functions that you can build larger
systems with.  When you need an aggregate over a collection, don&amp;rsquo;t create a
&lt;code&gt;sum&lt;/code&gt; variable and add to it, use a reduction.  Think with values, group those
values into logical collections, and apply functions across those values by
thinking in an elemental way.  Think with data.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>